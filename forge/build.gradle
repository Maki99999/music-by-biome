plugins {
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle'
    id 'org.spongepowered.mixin'
    id 'com.gradleup.shadow'
}

base {
    archivesName = "${mod_name}-forge-${minecraft_version}"
}

mixin {
    add(sourceSets.main, "${mod_id}.refmap.json")

    config("${mod_id}.mixins.json")
}

minecraft {
    mappings channel: 'official', version: minecraft_version
    copyIdeResources = true
    reobf = true

    if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    }

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven { url "https://jitpack.io" }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    compileOnly project(":common")
    annotationProcessor("org.spongepowered:mixin:0.8.5-SNAPSHOT:processor")
    implementation('net.sf.jopt-simple:jopt-simple:5.0.4') { version { strictly '5.0.4' } }
    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.4.0"))
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:0.4.0")) {
        jarJar.ranged(it, "[0.4.0,)")
    }

    implementation 'com.google.auto.service:auto-service-annotations:1.1.1'
    annotationProcessor 'com.google.auto.service:auto-service:1.1.1'
    shadow(minecraftLibrary('com.fasterxml.jackson.core:jackson-databind:2.17.2'))
    shadow(minecraftLibrary('com.github.goxr3plus:java-stream-player:9.0.4') {
        exclude group: 'junit', module: 'junit'
    })
}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
}

processResources {
    from project(":common").sourceSets.main.resources
}

shadowJar {
    configurations = [project.configurations.shadow]
    mergeServiceFiles()
    relocate("com.fasterxml.jackson", "${project.property('group')}.com.fasterxml.jackson")
    relocate("com.github.trilarion.sound", "${project.property('group')}.com.github.trilarion.sound")
    relocate("com.goxr3plus.streamplayer", "${project.property('group')}.com.goxr3plus.streamplayer")
    relocate("com.jcraft", "${project.property('group')}.com.jcraft")
    relocate("javazoom", "${project.property('group')}.javazoom")
    relocate("org.apache.commons.io", "${project.property('group')}.org.apache.commons.io")
    relocate("org.jaudiotagger", "${project.property('group')}.org.jaudiotagger")
    relocate("org.jflac", "${project.property('group')}.org.jflac")
    relocate("org.tritonus", "${project.property('group')}.org.tritonus")

    from(sourceSets.main.output)
    archiveFileName = "${mod_id}-forge-${minecraft_version}-${version}.jar"

    afterEvaluate {
        finalizedBy reobfShadowJar
    }
}

reobf {
    jar { classpath.from(sourceSets.main.compileClasspath) }
    shadowJar {}
}

jar.finalizedBy('reobfJar')
