plugins {
    id 'multiloader-loader'
    id 'fabric-loom'
    id 'com.gradleup.shadow'
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.layered {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${parchment_minecraft}:${parchment_version}@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

    implementation 'com.google.auto.service:auto-service-annotations:1.1.1'
    annotationProcessor 'com.google.auto.service:auto-service:1.1.1'
    shadow(implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.2')
    shadow(implementation 'com.github.goxr3plus:java-stream-player:9.0.4')
}

loom {
    def aw = project(':common').file("src/main/resources/${mod_id}.accesswidener")
    if (aw.exists()) {
        accessWidenerPath.set(aw)
    }
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }
    runs {
        client {
            client()
            setConfigName('Fabric Client')
            ideConfigGenerated(true)
            runDir('runs/client')
        }
        server {
            server()
            setConfigName('Fabric Server')
            ideConfigGenerated(true)
            runDir('runs/server')
        }
    }
}

shadowJar {
    configurations = [project.configurations.shadow]
    mergeServiceFiles()
    relocate("com", "${project.property('group')}.com")
    relocate("javazoom", "${project.property('group')}.javazoom")
    relocate("junit", "${project.property('group')}.junit")
    relocate("org", "${project.property('group')}.org")
}

remapJar {
    dependsOn shadowJar
    inputFile = tasks.shadowJar.archiveFile
}