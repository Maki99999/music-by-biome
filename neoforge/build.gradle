plugins {
    id 'multiloader-loader'
    id 'net.neoforged.moddev'
    id 'com.gradleup.shadow'
}

neoForge {
    version = neoforge_version
    // Automatically enable neoforge AccessTransformers if the file exists
    def at = project(':common').file('src/main/resources/META-INF/accesstransformer.cfg')
    if (at.exists()) {
        accessTransformers.add(at.absolutePath)
    }
    parchment {
        minecraftVersion = parchment_minecraft
        mappingsVersion = parchment_version
    }
    runs {
        configureEach {
            systemProperty('neoforge.enabledGameTestNamespaces', mod_id)
            ideName = "NeoForge ${it.name.capitalize()} (${project.path})" // Unify the run config names with fabric
            additionalRuntimeClasspathConfiguration.extendsFrom configurations.shadow
        }
        client {
            client()
        }
        data {
            data()
        }
        server {
            server()
        }
    }
    mods {
        "${mod_id}" {
            sourceSet sourceSets.main
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    implementation 'com.google.auto.service:auto-service-annotations:1.1.1'
    annotationProcessor 'com.google.auto.service:auto-service:1.1.1'
    shadow(implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.2')
    shadow(implementation 'com.github.goxr3plus:java-stream-player:9.0.4')
}

shadowJar {
    configurations = [project.configurations.shadow]
    mergeServiceFiles()
    relocate("com", "${project.property('group')}.com")
    relocate("javazoom", "${project.property('group')}.javazoom")
    relocate("junit", "${project.property('group')}.junit")
    relocate("org", "${project.property('group')}.org")
}

jar {
    dependsOn shadowJar
    enabled = false
}