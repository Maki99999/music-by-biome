plugins {
    // see https://fabricmc.net/develop/ for new versions
    id 'fabric-loom' version '1.7-SNAPSHOT' apply false
    id 'net.minecraftforge.gradle' version '[6.0.24,6.2)' apply false
    id 'org.spongepowered.gradle.vanilla' version '0.2.1-SNAPSHOT' apply false
    id("org.spongepowered.mixin") version "0.7-SNAPSHOT" apply false
    id 'com.gradleup.shadow' version '8.3.0' apply false
}



subprojects {
    apply plugin: 'java'

    java.toolchain.languageVersion = JavaLanguageVersion.of(17)
    java.withSourcesJar()
    java.withJavadocJar()

    jar {
        from(rootProject.file("LICENSE")) {
            rename { "${it}_${mod_name}" }
        }
        manifest {
            attributes([
                    'Specification-Title'   : mod_name,
                    'Specification-Vendor'  : mod_author,
                    'Specification-Version' : project.jar.archiveVersion,
                    'Implementation-Title'  : project.name,
                    'Implementation-Version': project.jar.archiveVersion,
                    'Implementation-Vendor' : mod_author,
                    'Built-On-Minecraft'    : minecraft_version,
                    'CurseForge'            : curse_page,
                    'Modrinth'              : modrinth_page
            ])
        }
    }

    sourcesJar {
        from(rootProject.file("LICENSE")) {
            rename { "${it}_${mod_name}" }
        }
    }

    repositories {
        mavenCentral()
        maven {
            name = 'Sponge / Mixin'
            url = 'https://repo.spongepowered.org/repository/maven-public/'
        }
        maven {
            name = 'BlameJared Maven (JEI / CraftTweaker / Bookshelf)'
            url = 'https://maven.blamejared.com'
        }
        maven { url "https://jitpack.io" }
    }

    tasks.withType(JavaCompile).configureEach {

        it.options.encoding = 'UTF-8'
        it.options.getRelease().set(17)
    }

    processResources {
        def expandProps = [
                'version'                      : project.version,
                'group'                        : project.group,
                'minecraft_version'            : minecraft_version,
                'minecraft_version_range'      : minecraft_version_range,
                'minecraft_version_range_alt'  : minecraft_version_range_alt,
                'mod_name'                     : mod_name,
                'mod_author'                   : mod_author,
                'mod_id'                       : mod_id,
                'mod_license'                  : mod_license,
                'mod_description'              : mod_description,
                'fabric_version'               : fabric_version,
                'fabric_loader_version'        : fabric_loader_version,
                "forge_version"                : forge_version,
                "forge_loader_version_range"   : forge_loader_version_range,
                'java_version'                 : java_version
        ]

        filesMatching(['pack.mcmeta', 'fabric.mod.json', 'META-INF/mods.toml', '*.mixins.json']) {
            expand expandProps
        }
        inputs.properties(expandProps)
    }

    tasks.withType(GenerateModuleMetadata).configureEach {

        enabled = false
    }
}

tasks.register('generateJars') {
    group = 'build'
    description = 'Generates jar files for all subprojects and collects them into a single folder.'

    def outputDir = file("$buildDir/generatedJars")

    doFirst {
        outputDir.mkdirs()
    }

    dependsOn(subprojects.collect { subproject ->
        def jarTaskName = getJarTaskName(subproject)
        if (jarTaskName) {
            subproject.tasks.named(jarTaskName).get()
        } else {
            null
        }
    }.findAll { it != null })

    doLast {
        subprojects.each { subproject ->
            def jarTaskName = getJarTaskName(subproject)
            if (jarTaskName) {
                def jarFile = file("${subproject.buildDir}/libs/${mod_id}-${subproject.name}-${minecraft_version}-${version}.jar")
                if (jarFile.exists()) {
                    copy {
                        from jarFile
                        into outputDir
                    }
                }
            }
        }
        println "JAR files have been generated and placed in: ${outputDir}"
    }
}

def getJarTaskName(Project subproject) {
    switch (subproject.name) {
        case 'fabric':
            return 'remappedShadowJar'
        case 'forge':
            return 'reobfShadowJar'
        case 'neoforge':
            return 'shadowJar'
        default:
            return null
    }
}
